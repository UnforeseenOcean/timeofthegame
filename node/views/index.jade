

extend layout

block content

  script(type='text/javascript').
      var defTogJSON =!{JSON.stringify(defTogJSON)}
    
  .mainblock

    
    .title
      p
        | The Time of the Game
    
    .subtitle
      p
        | a synchronized global view of the World Cup final

    script(type='text/javascript', src="tvmapping/js/easeljs-0.6.1.min.js")
    script(type='text/javascript', src="tvmapping/js/qlib_min.js")
    script(type='text/javascript', src="http://code.jquery.com/jquery-1.9.1.min.js")
    script(type='text/javascript', src='js/jquery.nstSlider.min.js')
    link(rel='stylesheet', href='css/jquery.nstSlider.css')
    script.

      $().ready(function() {

        // Returns height of browser viewport
        w = $( window ).width();
         
        // Returns height of HTML document
        h = $( window ).height();

        var canvas = document.createElement('canvas');
        canvas.id     = "output";
        canvas.width  = w;
        canvas.height = h;

        $('.canvii').append(canvas);

        $('.nstSlider').css({
          'left': 150 + "px",
          'width': w - 300 + "px"
        });

        $('.cities').css({
          position:'fixed',
          top:"20px",
          right:"0px",
          width:200 + "px",
          
        })



        init();
      })

      console.log("GOT JSON." + defTogJSON.length)
      var allData = defTogJSON;
      var bmd;
      var currentImage;
      var invMat;
      var corners_out;
      var data;
      var w;
      var h;
      var perAlpha;

      var cityList = {};
      
        
      function init(){

        

        console.log($('#outputr'))

        console.log(w + ":" + h)

        //$('#output').width(w).height(h)
        
        output = document.getElementById('output');

        
        var target_width = 160;
        var target_height= 90;
        
        corners_out = [
                [(output.width - target_width)*0.5, (output.height - target_height)*0.5 - 10 ], 
                [(output.width - target_width)*0.5 +target_width, (output.height - target_height)*0.5 - 10], 
                [(output.width - target_width)*0.5 +target_width, (output.height - target_height)*0.5 + target_height - 10], 
                [(output.width - target_width)*0.5, (output.height - target_height)*0.5 + target_height -10]
              ];

        setRandomData(30,0,120);
        
        
      }

      function setRandomData(num,minRange,maxRange) {
        console.log("SET RANDOM" + minRange + ":" + maxRange)
        candidates = [];
        cityList = [];

        data = [];
        for (var i = 0;i < allData.length; i++) {
          if (allData[i].timeofgame >= minRange && allData[i].timeofgame <= maxRange) {
            candidates.push(allData[i]);
            if (allData[i].location != undefined) {
            var loc = allData[i].location.toLowerCase().replace('.','');
            if (!cityList[loc]) {
              cityList[loc] = 1;
            } else {
              console.log("ALREADY HAD IT!");
              cityList[loc]++;
            }
            }
          }
        }

        //trace cities
        console.log(cityList);

        $('.cities').empty();

        for(var n in cityList) {
          if (cityList[n] > 1) {
            console.log(n);
            $('<p>', {
              class:'city_tag'
            }).html(n).appendTo($('.cities')).click(function() {
              renderCity($(this).html());
            })
          }
        }

        var fraction = num / candidates.length;
        console.log("fraction" + fraction);
        for (var i = 0;i < candidates.length; i++) {
          if (Math.random() < fraction) data.push(candidates[i]);
        }
        render(data);
      }

      function renderCity(city) {
        
        candidates = [];

        data = [];
        for (var i = 0;i < allData.length; i++) {
          if (allData[i].location != undefined) {
            var loc = allData[i].location.toLowerCase().replace('.','');
            if (loc == city) {
              candidates.push(allData[i]);
            }
          }
        }

        render(candidates);

      }
      
      /*
      function processImage()
      {
        var scale = 800 / Math.max(currentImage.width,currentImage.height) ;
        var m =  new qlib.Matrix(scale,0,0,scale,(800 -currentImage.width*scale)*0.5, (800 -currentImage.height*scale)*0.5);
        helperHandles[0].x = m.tx;
        helperHandles[0].y = m.ty;
        helperHandles[1].x = m.tx+currentImage.width*scale;
        helperHandles[1].y = m.ty;
        helperHandles[2].x = m.tx+currentImage.width*scale;
        helperHandles[2].y = m.ty+currentImage.height*scale;
        helperHandles[3].x = m.tx;
        helperHandles[3].y = m.ty+currentImage.height*scale;
        
        bmd.draw(currentImage,m);
        invMat = m.invert();
        render();
      }
      */
      
      
      function getBarycentric(p,p1,p2,p3)
      {
        var l = 1 / ((p2[1]-p3[1])*(p1[0]-p3[0])+(p3[0]-p2[0])*(p1[1]-p3[1]));
        var l1 = ((p2[1]-p3[1])*(p[0]-p3[0]) + (p3[0]-p2[0])*(p[1]-p3[1]) ) * l;
        var l2 = ((p3[1]-p1[1])*(p[0]-p3[0]) + (p1[0]-p3[0])*(p[1]-p3[1]) )* l;
        return [l1,l2,1-l1-l2];
      }
      
      function setProjectedCorner(p1,p2,p3,bary,target)
      {
        target[0] = bary[0]*p1[0]+bary[1]*p2[0]+bary[2]*p3[0];
        target[1] = bary[0]*p1[1]+bary[1]*p2[1]+bary[2]*p3[1];
      }
      
      function render(data, index)
      {
        if (data.length > 30) {
          perAlpha = 0.25;
        } else if (data.length > 10) {
          perAlpha = 0.35;
        } else if (data.length > 1) {
          perAlpha = 0.5;
        } else {
          perAlpha = 1;
        }

        if ( index == null ) {
          index = 0;
          var context = output.getContext('2d');
          context.fillStyle="black";
          context.globalAlpha = 1;
          context.clearRect( 0, 0, output.width, output.height );
        }
        if ( data.length >  index )
        {
          var img = currentImage = new Image();
          img.src = "out/thetimeofthegame" + data[index].localURL;
          img.addEventListener("load", function() { renderImage(img,data[index].corners.split(","),perAlpha); render(data,index+1)}, false);
        }
      }
      
      function debugImage( image, corners_in, alpha ) 
      {
      
      
        var context = output.getContext('2d');
        context.save();
        context.drawImage(image,0,0);
        context.strokeStyle = "white";
        context.beginPath(); 
        context.moveTo(corners_in[0], corners_in[1] ); 
        context.lineTo(corners_in[2], corners_in[3] );
        context.lineTo(corners_in[4], corners_in[5] );
        context.lineTo(corners_in[6], corners_in[7] );
        
        context.closePath();
        context.stroke();
        context.restore();
      }
      
      function renderImage( image, corners_raw, alpha ) 
      {
        
        
        var corners_in = [[corners_raw[0], corners_raw[1]] ,
        [corners_raw[2], corners_raw[3] ],
        [corners_raw[4], corners_raw[5] ],
        [corners_raw[6], corners_raw[7] ]];
        
        var scale = 800 / Math.max(image.width,image.height) ;
        var m =  new qlib.Matrix(scale,0,0,scale,(800 -image.width*scale)*0.5, (800 -image.height*scale)*0.5);
        
        //var helperHandles = [[0,0],[image.width,0],[image.width,image.height],[0,image.height],[],[],[],[]];
        
        var helperHandles = [ [m.tx,m.ty],[m.tx+image.width*scale,m.ty],[m.tx+image.width*scale,m.ty+image.height*scale],[m.tx, m.ty+image.height*scale],[],[],[],[]]
         
        var invMat = m.invert();
        
        
        var b = getBarycentric(helperHandles[0],corners_in[0],corners_in[1],corners_in[3]);
        setProjectedCorner(corners_out[0],corners_out[1],corners_out[3],b,helperHandles[4]);
        
        b = getBarycentric(helperHandles[1],corners_in[1],corners_in[2],corners_in[0]);
        setProjectedCorner(corners_out[1],corners_out[2],corners_out[0],b,helperHandles[5]);
        
        b = getBarycentric(helperHandles[2],corners_in[2],corners_in[3],corners_in[1]);
        setProjectedCorner(corners_out[2],corners_out[3],corners_out[1],b,helperHandles[6]);
        
        b = getBarycentric(helperHandles[3],corners_in[3],corners_in[0],corners_in[2]);
        setProjectedCorner(corners_out[3],corners_out[0],corners_out[2],b,helperHandles[7]);
        
        var w = image.width;
        var h = image.height;
        
        var v = [helperHandles[4][0],helperHandles[4][1],
             helperHandles[5][0],helperHandles[5][1],
             helperHandles[6][0],helperHandles[6][1],
             helperHandles[7][0],helperHandles[7][1],
             corners_out[0][0], corners_out[0][1],
             corners_out[1][0], corners_out[1][1],
             corners_out[2][0], corners_out[2][1],
             corners_out[3][0], corners_out[3][1]
             ];
        
        v.push( (v[0]+v[2])*0.5, (v[1]+v[3])*0.5);
        v.push( (v[2]+v[4])*0.5, (v[3]+v[5])*0.5);
        v.push( (v[4]+v[6])*0.5, (v[5]+v[7])*0.5);
        v.push( (v[6]+v[0])*0.5, (v[7]+v[1])*0.5);
        
        v.push( (v[8]+v[10]+v[12]+v[14])*0.25, (v[9]+v[11]+v[13]+v[15])*0.25);
        
        var uv = [0,0,
              1,0,
              1,1,
              0,1,
              (corners_in[0][0] * invMat.a + invMat.tx) / w,(corners_in[0][1] * invMat.d + invMat.ty) / h,
              (corners_in[1][0] * invMat.a + invMat.tx) / w,(corners_in[1][1] * invMat.d + invMat.ty) / h,
              (corners_in[2][0] *invMat.a + invMat.tx) / w,(corners_in[2][1]* invMat.d + invMat.ty) / h,
              (corners_in[3][0] *invMat.a + invMat.tx) / w,(corners_in[3][1] * invMat.d + invMat.ty) / h];
        
        uv.push( (uv[0]+uv[2])*0.5, (uv[1]+uv[3])*0.5);
        uv.push( (uv[2]+uv[4])*0.5, (uv[3]+uv[5])*0.5);
        uv.push( (uv[4]+uv[6])*0.5, (uv[5]+uv[7])*0.5);
        uv.push( (uv[6]+uv[8])*0.5, (uv[7]+uv[9])*0.5);
        uv.push( (uv[8]+uv[10]+uv[12]+uv[14])*0.25, (uv[9]+uv[11]+uv[13]+uv[15])*0.25);
        
        var idc = [0,8,4,8,5,4,
        1,5,8,
        9,5,1,
        6,5,9,
        2,6,9,
        10,6,2,
        7,6,10,
        3,7,10,
        11,7,3,
        4,7,11,
        0,4,11,
        4,5,12,
        5,6,12,
        6,7,12,
        7,4,12];
      
        
        var context = output.getContext('2d');
        
        
        for (var t=0; t < idc.length; t+=3) 
        {
          var i0 = idc[t]<<1;
          var i1 = idc[t+1]<<1;
          var i2 = idc[t+2]<<1;
          
          var x0 = v[i0], x1 = v[i1], x2 =v[i2];
          var y0 = v[i0+1], y1 =v[i1+1], y2 = v[i2+1];
          
          var u0 = uv[i0] * w, u1 = uv[i1] * w, u2 = uv[i2] * w;
          var v0 = uv[i0+1] *h, v1 =uv[i1+1]*h, v2 = uv[i2+1]*h;

          var delta = 1 / (u0*v1 + v0*u2 + u1*v2 - v1*u2 - v0*u1 - u0*v2);
          var delta_a = x0*v1 + v0*x2 + x1*v2 - v1*x2 - v0*x1 - x0*v2;
          var delta_b = u0*x1 + x0*u2 + u1*x2 - x1*u2 - x0*u1 - u0*x2;
          var delta_c = u0*v1*x2 + v0*x1*u2 + x0*u1*v2 - x0*v1*u2 - v0*u1*x2 - u0*x1*v2;
          var delta_d = y0*v1 + v0*y2 + y1*v2 - v1*y2 - v0*y1 - y0*v2;
          var delta_e = u0*y1 + y0*u2 + u1*y2 - y1*u2 - y0*u1 - u0*y2;
          var delta_f = u0*v1*y2 + v0*y1*u2 + y0*u1*v2 - y0*v1*u2 - v0*u1*y2 - u0*y1*v2;

          /*
          var ctx = (x0 + x1 + x2) * 0.3333;
          var cty = (y0 + y1 + y2) * 0.3333;
          x0 = ctx + (x0-ctx)*1.01;
          x1 = ctx + (x1-ctx)*1.01;
          x2 = ctx + (x2-ctx)*1.01;
          
          y0 = cty + (y0-cty)*1.01;
          y1 = cty + (y1-cty)*1.01;
          y2 = cty + (y2-cty)*1.01;
          */
          
          context.save();
          context.globalAlpha = alpha;
          
          context.beginPath(); context.moveTo(x0, y0 ); context.lineTo(x1, y1);
          context.lineTo(x2, y2); context.closePath();context.clip();
          
          context.transform(delta_a*delta, delta_d*delta,
                    delta_b*delta, delta_e*delta,
                    delta_c*delta, delta_f*delta);
                
          context.drawImage(image, 0, 0);
          context.restore();
        }
      
        
      
        
      }

      

  div.canvii
    

  div.nstSlider(data-range_min="0", data-range_max="120",  data-cur_min="0",  data-cur_max="120" )

    div.leftGrip
      div.leftLabel

    div.rightGrip
      dib.rightLabel

    div.bar

  div.cities

    
    

  script.
    console.log($('.leftGrip'));
    function initSlider() {

        $('.nstSlider').nstSlider({
            "left_grip_selector": ".leftGrip",
            "right_grip_selector": ".rightGrip",
            "value_bar_selector": ".bar",
            "highlight": {
                "grip_class": "gripHighlighted",
                "panel_selector": ".highlightPanel"
            },
            "value_changed_callback": function(cause, leftValue, rightValue) {
                $('.leftLabel').text(leftValue + "m");
                $('.rightLabel').text(rightValue + "m");
            },
            "user_mouseup_callback": function(leftValue, rightValue, cause) {
            console.log(cause + ":" + leftValue + ":" + rightValue);
                setRandomData(50,leftValue,rightValue);
            },
        });

        
    }

    initSlider();



