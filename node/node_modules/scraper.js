/*

Time of the Game (node.js)
The Office For Creative Research
July, 2014

https://github.com/blprnt/timeofthegame

*/

var Twit = require('twit')
var fs = require('fs')
var mkdirp = require('mkdirp')
var request = require('request')

var AlchemyAPI = require('alchemy-api');
var alchemy = new AlchemyAPI('6de45b31bb7f7f4a1e45926549d1ce288a8cff5b');
//27da825640fc907d1957ec6ae95905ed9dae04ae
//9993f67ac97ab171a7d28ce4df491636f100b972


var T = new Twit({
    consumer_key: '4EP6uesxxc1g4ALu93Oh6R0UU',
    consumer_secret: 'LRBAh8PRJN5SAdFDkrM7m5OoPh1zxc5B3f9pbJ6e2sGDrnlD8V',
    access_token: '17013577-lq2s2tc0IVPUAftYZFO6rOm9uWeHxqV8KXCXZuZAw',
    access_token_secret: 'rJ8mPctIdYfgaoJjOvpPe7xbpyqJVOynQeJe5zK6Ct4kc'
})

//
//  STREAM SCRAPER
//
//
var searchQuery;
var imageUrlMap = [];
var saveDir;

var init = function(kw) {

  var path = require('path'),
    appDir = path.dirname(require.main.filename);
  console.log("APP DIR " + appDir)

  searchQuery = kw;
  saveDir = appDir+ '/public/out/' + searchQuery;

  console.log("Making Directory: " + saveDir)

  mkdirp(saveDir + "/images", function(err) { 

      // path was created unless there was error;
      if (err) {
        console.log("ERROR" + err)
      }

      mkdirp(saveDir + "/data", function(err) {});
      startScrape();

  });
}

var startScrape = function() {
  console.log("Starting scraper!!!.");
  var stream = T.stream('statuses/filter', { track: searchQuery })

  stream.on('tweet', function (status) {
    //DOES IT HAVE AN IMAGE?
    if (status.entities.media != undefined) {
        var media = status.entities.media;
        var url = media[0].media_url;
        //We don't already have it, download it
        if (imageUrlMap[url] == undefined) {
          console.log("NEW IMAGE!!!:" + url);
          download(url, saveDir + "/images/" + status.id + '.jpg', function(){});

          var testTweet = "@siddhmi @tejucole , 54th minute downtown San Francisco, #thetimeofthegame pic.twitter.com/A68DyT85xQ";

          var out = {};
          out.status = status.text;
          out.id = status.id;

          //Get the time
          var myRe = new RegExp("([0-9]{1,3})[mM^th minute]+", "g");
          var myArray = myRe.exec(testTweet);

          if (myArray) {
            var tog = myArray[1];
            out.timeofgame = tog;
            var tweetLoc;

            //Get location
            alchemy.entities(testTweet, {}, function(err, response) {
              if (err) throw err;
              console.log("DOING ALCHEMY");
              // See http://www.alchemyapi.com/api/entity/htmlc.html for format of returned object
              var entities = response.entities;
              console.log(entities);
              var hasCity = false;
              var hasCountry = false;
              var country;
              for (var i = 0; i < entities.length; i++) {
                console.log(entities[i].type);
                  if (entities[i].type == 'City') {
                    tweetLoc = entities[i].text;
                    hasCity = true;
                    console.log("FOUND CITY")

                  } else if (entities[i].type == 'Country') {
                    country = entities[i].text;
                    hasCountry = true;
                    console.log("FOUND COUNTRY")
                  }
                  if (hasCountry && !hasCity) tweetLoc = country;
               }

              // Do something with data
              console.log("LOCATION:" + tweetLoc)


              out.location = tweetLoc;
              out.imageURL = url;
              out.localURL = "/images/" + status.id + '.jpg';
              console.log("TEST:" + out);

              if (!out.location) console.log("NO LOCATION");
             

              var outputFilename = saveDir + '/data/' + status.id + ".json";
              fs.writeFile(outputFilename, JSON.stringify(out, null, 4), function(err) {
                if(err) {
                  console.log(err);
                } else {
                  console.log("JSON saved to " + outputFilename);
                }
              }); 
              imageUrlMap[url] = true;

            });

          } else {
            console.log("NO TIME OF GAME.")
          }
        }
    }
  })
}

var download = function(uri, filename, callback){
    request.head(uri, function(err, res, body){
    //console.log('content-type:', res.headers['content-type']);
    //console.log('content-length:', res.headers['content-length']);

    request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
  });
};

module.exports.init = init;


//
//  OLD SCRAPER CODE
//
/*
var outputFilename = __dirname + '/out/tog.json';

T.get('search/tweets', { q: 'timeofthegame', count: 100 }, function(err, data, response) {
  console.log(data.statuses.length)
  fs.writeFile(outputFilename, JSON.stringify(data, null, 4), function(err) {
    if(err) {
      console.log(err);
    } else {
      console.log("JSON saved to " + outputFilename);
    }
  }); 
})
*/


